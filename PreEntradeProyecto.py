# Inicializaci√≥n de la lista de productos
# Cada producto se almacena como una sublista: [nombre, categor√≠a, precio]
# Requisito: Usar listas para almacenar y gestionar los datos 
productos = []

# --- Funciones Auxiliares ---

def validar_cadena(mensaje):
    """Valida que la entrada del usuario no est√© vac√≠a."""
    while True: # Requisito: Incorporar bucles while 
        entrada = input(mensaje).strip()
        if entrada: # Requisito: Validar entradas del usuario, asegur√°ndote de que no se ingresen datos vac√≠os 
            return entrada
        else:
            print("‚ùå El campo no puede estar vac√≠o. Intenta de nuevo.")

def validar_precio(mensaje):
    """Valida que el precio ingresado sea un n√∫mero entero positivo."""
    while True: # Requisito: Incorporar bucles while 
        entrada = input(mensaje).strip()
        if not entrada:
            print("‚ùå El precio no puede estar vac√≠o.")
            continue
        try:
            # Requisito: Precio sin centavos (entero) [cite: 25]
            precio = int(entrada)
            if precio >= 0:
                return precio
            else:
                print("‚ùå El precio debe ser un n√∫mero positivo o cero.")
        except ValueError:
            # Requisito: Validar entradas, asegur√°ndote de que no se ingresen datos incorrectos 
            print("‚ùå Entrada incorrecta. Ingresa un n√∫mero entero para el precio.")


# --- Funcionalidades del Sistema ---

def agregar_producto():
    """Permite ingresar un nuevo producto a la lista."""
    print("\n--- üõí AGREGAR PRODUCTO ---")
    
    # Requisito: Ingreso de datos b√°sicos (nombre, categor√≠a, precio sin centavos) [cite: 25]
    nombre = validar_cadena("Ingresa el nombre del producto: ")
    categoria = validar_cadena("Ingresa la categor√≠a del producto: ")
    precio = validar_precio("Ingresa el precio del producto (sin centavos): $")
    
    # Requisito: Almacenar como sublista de tres elementos 
    nuevo_producto = [nombre, categoria, precio]
    productos.append(nuevo_producto)
    print(f"‚úÖ Producto '{nombre}' agregado con √©xito.")

def visualizar_productos():
    """Muestra todos los productos registrados en la lista."""
    print("\n--- üìã PRODUCTOS REGISTRADOS ---")
    if not productos: # Requisito: Usar condicionales 
        print("La lista de productos est√° vac√≠a.")
        return

    # Requisito: Informaci√≥n presentada de manera ordenada y legible, con cada producto numerado 
    for i in range(len(productos)): # Requisito: Incorporar bucles for 
        # El n√∫mero de posici√≥n es i + 1, ya que las listas empiezan en 0
        nombre, categoria, precio = productos[i] 
        print(f"{i + 1}. Nombre: {nombre} | Categor√≠a: {categoria} | Precio: ${precio}")

def buscar_productos():
    """Permite buscar productos por su nombre."""
    print("\n--- üîé BUSCAR PRODUCTOS ---")
    termino_busqueda = validar_cadena("Ingresa el nombre del producto a buscar: ").lower()
    
    resultados = []
    # Requisito: Usar bucles for para recorrer la lista 
    for producto in productos:
        # El nombre del producto est√° en el √≠ndice 0 de la sublista
        nombre_producto = producto[0].lower()
        if termino_busqueda in nombre_producto: # Requisito: Si encuentra coincidencias [cite: 33]
            resultados.append(producto)

    # Requisito: Usar condicionales para gestionar resultados 
    if resultados:
        print("\nüéâ Coincidencias encontradas:")
        for nombre, categoria, precio in resultados:
            print(f"- Nombre: {nombre} | Categor√≠a: {categoria} | Precio: ${precio}")
    else:
        # Requisito: Si no hay coincidencias, informar que no se encontraron resultados [cite: 34]
        print(f"‚ùå No se encontraron productos con el nombre '{termino_busqueda}'.")

def eliminar_producto():
    """Permite eliminar un producto por su n√∫mero de posici√≥n."""
    print("\n--- üóëÔ∏è ELIMINAR PRODUCTO ---")
    if not productos:
        print("No hay productos para eliminar.")
        return

    visualizar_productos() # Muestra la lista para que el usuario elija el n√∫mero
    
    while True: # Requisito: Incorporar bucles while 
        posicion_str = input("Ingresa el n√∫mero (posici√≥n) del producto a eliminar (o 'c' para cancelar): ").strip().lower()
        
        if posicion_str == 'c':
            print("Operaci√≥n cancelada.")
            return

        try:
            # Requisito: Eliminar un producto identific√°ndolo por su posici√≥n (n√∫mero) en la lista 
            posicion = int(posicion_str) - 1 # Se resta 1 porque la lista es base 0
            
            # Requisito: Validar entradas (que la posici√≥n exista) [cite: 40, 41]
            if 0 <= posicion < len(productos): 
                nombre_eliminado = productos[posicion][0]
                productos.pop(posicion) # Elimina el elemento en esa posici√≥n
                print(f"üóëÔ∏è Producto '{nombre_eliminado}' eliminado con √©xito.")
                break
            else:
                print("‚ùå N√∫mero de producto inv√°lido. Intenta de nuevo.")
        except ValueError:
            print("‚ùå Entrada inv√°lida. Ingresa un n√∫mero o 'c' para cancelar.")

# --- Funci√≥n Principal (Men√∫) ---

def sistema_gestion_productos():
    """Funci√≥n principal que ejecuta el men√∫ interactivo."""
    # Requisito: El programa debe continuar funcionando hasta que se elija una opci√≥n para salir 
    while True: # Bucle principal del programa
        print("\n=============================================")
        # Requisito: Presentar un men√∫ que permita elegir entre las funcionalidades disponibles [cite: 42]
        print("       SISTEMA DE GESTI√ìN B√ÅSICA DE PRODUCTOS")
        print("=============================================")
        print("1. Agregar producto") # Requisito: Agregar productos [cite: 42, 52]
        print("2. Visualizar productos") # Requisito: Visualizar productos [cite: 42, 53]
        print("3. Buscar producto") # Requisito: Buscar productos [cite: 42, 54]
        print("4. Eliminar producto") # Requisito: Eliminar productos [cite: 42, 55]
        print("5. Salir") # Requisito: Opci√≥n para salir [cite: 56]
        print("---------------------------------------------")
        
        opcion = input("Elige una opci√≥n (1-5): ").strip()

        # Requisito: Utilizar condicionales para gestionar las opciones del men√∫ 
        if opcion == '1':
            agregar_producto()
        elif opcion == '2':
            visualizar_productos()
        elif opcion == '3':
            buscar_productos()
        elif opcion == '4':
            eliminar_producto()
        elif opcion == '5':
            print("\nüëã ¬°Gracias por usar el Sistema de Gesti√≥n! Saliendo del programa...")
            break # Sale del bucle 'while True' principal
        else:
            print("‚ùå Opci√≥n no v√°lida. Por favor, elige un n√∫mero del 1 al 5.")

# Ejecutar el sistema
if __name__ == "__main__":
    sistema_gestion_productos()